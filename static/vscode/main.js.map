{"version":3,"sources":["out-vscode/main.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\n/**\n * @typedef {import('./vs/base/common/product').IProductConfiguration} IProductConfiguration\n * @typedef {import('./vs/base/node/languagePacks').NLSConfiguration} NLSConfiguration\n * @typedef {import('./vs/platform/environment/common/argv').NativeParsedArgs} NativeParsedArgs\n */\n\nconst perf = require('./vs/base/common/performance');\nperf.mark('code/didStartMain');\n\nconst path = require('path');\nconst fs = require('fs');\nconst os = require('os');\nconst bootstrap = require('./bootstrap');\nconst bootstrapNode = require('./bootstrap-node');\nconst { getUserDataPath } = require('./vs/platform/environment/node/userDataPath');\n/** @type {Partial<IProductConfiguration>} */\nconst product = require('../product.json');\nconst { app, protocol, crashReporter } = require('electron');\n\n// Disable render process reuse, we still have\n// non-context aware native modules in the renderer.\napp.allowRendererProcessReuse = false;\n\n// Enable portable support\nconst portable = bootstrapNode.configurePortable(product);\n\n// Enable ASAR support\nbootstrap.enableASARSupport(undefined);\n\n// Set userData path before app 'ready' event\nconst args = parseCLIArgs();\nconst userDataPath = getUserDataPath(args);\napp.setPath('userData', userDataPath);\n\n// Configure static command line arguments\nconst argvConfig = configureCommandlineSwitchesSync(args);\n\n// Configure crash reporter\nperf.mark('code/willStartCrashReporter');\nconfigureCrashReporter();\nperf.mark('code/didStartCrashReporter');\n\n// Set logs path before app 'ready' event if running portable\n// to ensure that no 'logs' folder is created on disk at a\n// location outside of the portable directory\n// (https://github.com/microsoft/vscode/issues/56651)\nif (portable && portable.isPortable) {\n\tapp.setAppLogsPath(path.join(userDataPath, 'logs'));\n}\n\n// Register custom schemes with privileges\nprotocol.registerSchemesAsPrivileged([\n\t{\n\t\tscheme: 'vscode-webview',\n\t\tprivileges: { standard: true, secure: true, supportFetchAPI: true, corsEnabled: true, allowServiceWorkers: true, }\n\t},\n\t{\n\t\tscheme: 'vscode-file',\n\t\tprivileges: { secure: true, standard: true, supportFetchAPI: true, corsEnabled: true }\n\t}\n]);\n\n// Global app listeners\nregisterListeners();\n\n// Cached data\nconst nodeCachedDataDir = getNodeCachedDir();\n\n/**\n * Support user defined locale: load it early before app('ready')\n * to have more things running in parallel.\n *\n * @type {Promise<NLSConfiguration> |Â undefined}\n */\nlet nlsConfigurationPromise = undefined;\n\nconst metaDataFile = path.join(__dirname, 'nls.metadata.json');\nconst locale = getUserDefinedLocale(argvConfig);\nif (locale) {\n\tconst { getNLSConfiguration } = require('./vs/base/node/languagePacks');\n\tnlsConfigurationPromise = getNLSConfiguration(product.commit, userDataPath, metaDataFile, locale);\n}\n\n// Load our code once ready\napp.once('ready', function () {\n\tif (args['trace']) {\n\t\tconst contentTracing = require('electron').contentTracing;\n\n\t\tconst traceOptions = {\n\t\t\tcategoryFilter: args['trace-category-filter'] || '*',\n\t\t\ttraceOptions: args['trace-options'] || 'record-until-full,enable-sampling'\n\t\t};\n\n\t\tcontentTracing.startRecording(traceOptions).finally(() => onReady());\n\t} else {\n\t\tonReady();\n\t}\n});\n\n/**\n * Main startup routine\n *\n * @param {string | undefined} cachedDataDir\n * @param {NLSConfiguration} nlsConfig\n */\nfunction startup(cachedDataDir, nlsConfig) {\n\tnlsConfig._languagePackSupport = true;\n\n\tprocess.env['VSCODE_NLS_CONFIG'] = JSON.stringify(nlsConfig);\n\tprocess.env['VSCODE_NODE_CACHED_DATA_DIR'] = cachedDataDir || '';\n\n\t// Load main in AMD\n\tperf.mark('code/willLoadMainBundle');\n\trequire('./bootstrap-amd').load('vs/code/electron-main/main', () => {\n\t\tperf.mark('code/didLoadMainBundle');\n\t});\n}\n\nasync function onReady() {\n\tperf.mark('code/mainAppReady');\n\n\ttry {\n\t\tconst [cachedDataDir, nlsConfig] = await Promise.all([nodeCachedDataDir.ensureExists(), resolveNlsConfiguration()]);\n\n\t\tstartup(cachedDataDir, nlsConfig);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\n/**\n * @param {NativeParsedArgs} cliArgs\n */\nfunction configureCommandlineSwitchesSync(cliArgs) {\n\tconst SUPPORTED_ELECTRON_SWITCHES = [\n\n\t\t// alias from us for --disable-gpu\n\t\t'disable-hardware-acceleration',\n\n\t\t// provided by Electron\n\t\t'disable-color-correct-rendering',\n\n\t\t// override for the color profile to use\n\t\t'force-color-profile'\n\t];\n\n\tif (process.platform === 'linux') {\n\n\t\t// Force enable screen readers on Linux via this flag\n\t\tSUPPORTED_ELECTRON_SWITCHES.push('force-renderer-accessibility');\n\t}\n\n\tconst SUPPORTED_MAIN_PROCESS_SWITCHES = [\n\n\t\t// Persistently enable proposed api via argv.json: https://github.com/microsoft/vscode/issues/99775\n\t\t'enable-proposed-api',\n\n\t\t// TODO@sandbox remove me once testing is done on `vscode-file` protocol\n\t\t// (all traces of `enable-browser-code-loading` and `VSCODE_BROWSER_CODE_LOADING`)\n\t\t'enable-browser-code-loading',\n\n\t\t// Log level to use. Default is 'info'. Allowed values are 'critical', 'error', 'warn', 'info', 'debug', 'trace', 'off'.\n\t\t'log-level'\n\t];\n\n\t// Read argv config\n\tconst argvConfig = readArgvConfigSync();\n\n\tlet browserCodeLoadingStrategy = undefined;\n\n\tObject.keys(argvConfig).forEach(argvKey => {\n\t\tconst argvValue = argvConfig[argvKey];\n\n\t\t// Append Electron flags to Electron\n\t\tif (SUPPORTED_ELECTRON_SWITCHES.indexOf(argvKey) !== -1) {\n\n\t\t\t// Color profile\n\t\t\tif (argvKey === 'force-color-profile') {\n\t\t\t\tif (argvValue) {\n\t\t\t\t\tapp.commandLine.appendSwitch(argvKey, argvValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Others\n\t\t\telse if (argvValue === true || argvValue === 'true') {\n\t\t\t\tif (argvKey === 'disable-hardware-acceleration') {\n\t\t\t\t\tapp.disableHardwareAcceleration(); // needs to be called explicitly\n\t\t\t\t} else {\n\t\t\t\t\tapp.commandLine.appendSwitch(argvKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Append main process flags to process.argv\n\t\telse if (SUPPORTED_MAIN_PROCESS_SWITCHES.indexOf(argvKey) !== -1) {\n\t\t\tswitch (argvKey) {\n\t\t\t\tcase 'enable-proposed-api':\n\t\t\t\t\tif (Array.isArray(argvValue)) {\n\t\t\t\t\t\targvValue.forEach(id => id && typeof id === 'string' && process.argv.push('--enable-proposed-api', id));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(`Unexpected value for \\`enable-proposed-api\\` in argv.json. Expected array of extension ids.`);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'enable-browser-code-loading':\n\t\t\t\t\tif (argvValue === false) {\n\t\t\t\t\t\tbrowserCodeLoadingStrategy = undefined;\n\t\t\t\t\t} else if (typeof argvValue === 'string') {\n\t\t\t\t\t\tbrowserCodeLoadingStrategy = argvValue;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'log-level':\n\t\t\t\t\tif (typeof argvValue === 'string') {\n\t\t\t\t\t\tprocess.argv.push('--log', argvValue);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Support JS Flags\n\tconst jsFlags = getJSFlags(cliArgs);\n\tif (jsFlags) {\n\t\tapp.commandLine.appendSwitch('js-flags', jsFlags);\n\t}\n\n\t// Configure vscode-file:// code loading environment\n\tif (cliArgs.__sandbox || browserCodeLoadingStrategy) {\n\t\tprocess.env['VSCODE_BROWSER_CODE_LOADING'] = browserCodeLoadingStrategy || 'bypassHeatCheck';\n\t}\n\n\treturn argvConfig;\n}\n\nfunction readArgvConfigSync() {\n\n\t// Read or create the argv.json config file sync before app('ready')\n\tconst argvConfigPath = getArgvConfigPath();\n\tlet argvConfig;\n\ttry {\n\t\targvConfig = JSON.parse(stripComments(fs.readFileSync(argvConfigPath).toString()));\n\t} catch (error) {\n\t\tif (error && error.code === 'ENOENT') {\n\t\t\tcreateDefaultArgvConfigSync(argvConfigPath);\n\t\t} else {\n\t\t\tconsole.warn(`Unable to read argv.json configuration file in ${argvConfigPath}, falling back to defaults (${error})`);\n\t\t}\n\t}\n\n\t// Fallback to default\n\tif (!argvConfig) {\n\t\targvConfig = {\n\t\t\t'disable-color-correct-rendering': true // Force pre-Chrome-60 color profile handling (for https://github.com/microsoft/vscode/issues/51791)\n\t\t};\n\t}\n\n\treturn argvConfig;\n}\n\n/**\n * @param {string} argvConfigPath\n */\nfunction createDefaultArgvConfigSync(argvConfigPath) {\n\ttry {\n\n\t\t// Ensure argv config parent exists\n\t\tconst argvConfigPathDirname = path.dirname(argvConfigPath);\n\t\tif (!fs.existsSync(argvConfigPathDirname)) {\n\t\t\tfs.mkdirSync(argvConfigPathDirname);\n\t\t}\n\n\t\t// Default argv content\n\t\tconst defaultArgvConfigContent = [\n\t\t\t'// This configuration file allows you to pass permanent command line arguments to VS Code.',\n\t\t\t'// Only a subset of arguments is currently supported to reduce the likelihood of breaking',\n\t\t\t'// the installation.',\n\t\t\t'//',\n\t\t\t'// PLEASE DO NOT CHANGE WITHOUT UNDERSTANDING THE IMPACT',\n\t\t\t'//',\n\t\t\t'// NOTE: Changing this file requires a restart of VS Code.',\n\t\t\t'{',\n\t\t\t'\t// Use software rendering instead of hardware accelerated rendering.',\n\t\t\t'\t// This can help in cases where you see rendering issues in VS Code.',\n\t\t\t'\t// \"disable-hardware-acceleration\": true,',\n\t\t\t'',\n\t\t\t'\t// Enabled by default by VS Code to resolve color issues in the renderer',\n\t\t\t'\t// See https://github.com/microsoft/vscode/issues/51791 for details',\n\t\t\t'\t\"disable-color-correct-rendering\": true',\n\t\t\t'}'\n\t\t];\n\n\t\t// Create initial argv.json with default content\n\t\tfs.writeFileSync(argvConfigPath, defaultArgvConfigContent.join('\\n'));\n\t} catch (error) {\n\t\tconsole.error(`Unable to create argv.json configuration file in ${argvConfigPath}, falling back to defaults (${error})`);\n\t}\n}\n\nfunction getArgvConfigPath() {\n\tconst vscodePortable = process.env['VSCODE_PORTABLE'];\n\tif (vscodePortable) {\n\t\treturn path.join(vscodePortable, 'argv.json');\n\t}\n\n\tlet dataFolderName = product.dataFolderName;\n\tif (process.env['VSCODE_DEV']) {\n\t\tdataFolderName = `${dataFolderName}-dev`;\n\t}\n\n\treturn path.join(os.homedir(), dataFolderName, 'argv.json');\n}\n\nfunction configureCrashReporter() {\n\n\t// If a crash-reporter-directory is specified we store the crash reports\n\t// in the specified directory and don't upload them to the crash server.\n\tlet crashReporterDirectory = args['crash-reporter-directory'];\n\tlet submitURL = '';\n\tif (crashReporterDirectory) {\n\t\tcrashReporterDirectory = path.normalize(crashReporterDirectory);\n\n\t\tif (!path.isAbsolute(crashReporterDirectory)) {\n\t\t\tconsole.error(`The path '${crashReporterDirectory}' specified for --crash-reporter-directory must be absolute.`);\n\t\t\tapp.exit(1);\n\t\t}\n\n\t\tif (!fs.existsSync(crashReporterDirectory)) {\n\t\t\ttry {\n\t\t\t\tfs.mkdirSync(crashReporterDirectory);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`The path '${crashReporterDirectory}' specified for --crash-reporter-directory does not seem to exist or cannot be created.`);\n\t\t\t\tapp.exit(1);\n\t\t\t}\n\t\t}\n\n\t\t// Crashes are stored in the crashDumps directory by default, so we\n\t\t// need to change that directory to the provided one\n\t\tconsole.log(`Found --crash-reporter-directory argument. Setting crashDumps directory to be '${crashReporterDirectory}'`);\n\t\tapp.setPath('crashDumps', crashReporterDirectory);\n\t}\n\n\t// Otherwise we configure the crash reporter from product.json\n\telse {\n\t\tconst appCenter = product.appCenter;\n\t\t// Disable Appcenter crash reporting if\n\t\t// * --crash-reporter-directory is specified\n\t\t// * enable-crash-reporter runtime argument is set to 'false'\n\t\t// * --disable-crash-reporter command line parameter is set\n\t\tif (appCenter && argvConfig['enable-crash-reporter'] && !args['disable-crash-reporter']) {\n\t\t\tconst isWindows = (process.platform === 'win32');\n\t\t\tconst isLinux = (process.platform === 'linux');\n\t\t\tconst isDarwin = (process.platform === 'darwin');\n\t\t\tconst crashReporterId = argvConfig['crash-reporter-id'];\n\t\t\tconst uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n\t\t\tif (uuidPattern.test(crashReporterId)) {\n\t\t\t\tif (isWindows) {\n\t\t\t\t\tswitch (process.arch) {\n\t\t\t\t\t\tcase 'ia32':\n\t\t\t\t\t\t\tsubmitURL = appCenter['win32-ia32'];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'x64':\n\t\t\t\t\t\t\tsubmitURL = appCenter['win32-x64'];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'arm64':\n\t\t\t\t\t\t\tsubmitURL = appCenter['win32-arm64'];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (isDarwin) {\n\t\t\t\t\tif (product.darwinUniversalAssetId) {\n\t\t\t\t\t\tsubmitURL = appCenter['darwin-universal'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (process.arch) {\n\t\t\t\t\t\t\tcase 'x64':\n\t\t\t\t\t\t\t\tsubmitURL = appCenter['darwin'];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'arm64':\n\t\t\t\t\t\t\t\tsubmitURL = appCenter['darwin-arm64'];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (isLinux) {\n\t\t\t\t\tsubmitURL = appCenter['linux-x64'];\n\t\t\t\t}\n\t\t\t\tsubmitURL = submitURL.concat('&uid=', crashReporterId, '&iid=', crashReporterId, '&sid=', crashReporterId);\n\t\t\t\t// Send the id for child node process that are explicitly starting crash reporter.\n\t\t\t\t// For vscode this is ExtensionHost process currently.\n\t\t\t\tconst argv = process.argv;\n\t\t\t\tconst endOfArgsMarkerIndex = argv.indexOf('--');\n\t\t\t\tif (endOfArgsMarkerIndex === -1) {\n\t\t\t\t\targv.push('--crash-reporter-id', crashReporterId);\n\t\t\t\t} else {\n\t\t\t\t\t// if the we have an argument \"--\" (end of argument marker)\n\t\t\t\t\t// we cannot add arguments at the end. rather, we add\n\t\t\t\t\t// arguments before the \"--\" marker.\n\t\t\t\t\targv.splice(endOfArgsMarkerIndex, 0, '--crash-reporter-id', crashReporterId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Start crash reporter for all processes\n\tconst productName = (product.crashReporter ? product.crashReporter.productName : undefined) || product.nameShort;\n\tconst companyName = (product.crashReporter ? product.crashReporter.companyName : undefined) || 'Microsoft';\n\tcrashReporter.start({\n\t\tcompanyName: companyName,\n\t\tproductName: process.env['VSCODE_DEV'] ? `${productName} Dev` : productName,\n\t\tsubmitURL,\n\t\tuploadToServer: !crashReporterDirectory,\n\t\tcompress: true\n\t});\n}\n\n/**\n * @param {NativeParsedArgs} cliArgs\n * @returns {string | null}\n */\nfunction getJSFlags(cliArgs) {\n\tconst jsFlags = [];\n\n\t// Add any existing JS flags we already got from the command line\n\tif (cliArgs['js-flags']) {\n\t\tjsFlags.push(cliArgs['js-flags']);\n\t}\n\n\t// Support max-memory flag\n\tif (cliArgs['max-memory'] && !/max_old_space_size=(\\d+)/g.exec(cliArgs['js-flags'])) {\n\t\tjsFlags.push(`--max_old_space_size=${cliArgs['max-memory']}`);\n\t}\n\n\treturn jsFlags.length > 0 ? jsFlags.join(' ') : null;\n}\n\n/**\n * @returns {NativeParsedArgs}\n */\nfunction parseCLIArgs() {\n\tconst minimist = require('minimist');\n\n\treturn minimist(process.argv, {\n\t\tstring: [\n\t\t\t'user-data-dir',\n\t\t\t'locale',\n\t\t\t'js-flags',\n\t\t\t'max-memory',\n\t\t\t'crash-reporter-directory'\n\t\t]\n\t});\n}\n\nfunction registerListeners() {\n\n\t/**\n\t * macOS: when someone drops a file to the not-yet running VSCode, the open-file event fires even before\n\t * the app-ready event. We listen very early for open-file and remember this upon startup as path to open.\n\t *\n\t * @type {string[]}\n\t */\n\tconst macOpenFiles = [];\n\tglobal['macOpenFiles'] = macOpenFiles;\n\tapp.on('open-file', function (event, path) {\n\t\tmacOpenFiles.push(path);\n\t});\n\n\t/**\n\t * macOS: react to open-url requests.\n\t *\n\t * @type {string[]}\n\t */\n\tconst openUrls = [];\n\tconst onOpenUrl =\n\t\t/**\n\t\t * @param {{ preventDefault: () => void; }} event\n\t\t * @param {string} url\n\t\t */\n\t\tfunction (event, url) {\n\t\t\tevent.preventDefault();\n\n\t\t\topenUrls.push(url);\n\t\t};\n\n\tapp.on('will-finish-launching', function () {\n\t\tapp.on('open-url', onOpenUrl);\n\t});\n\n\tglobal['getOpenUrls'] = function () {\n\t\tapp.removeListener('open-url', onOpenUrl);\n\n\t\treturn openUrls;\n\t};\n}\n\n/**\n * @returns {{ ensureExists: () => Promise<string | undefined> }}\n */\nfunction getNodeCachedDir() {\n\treturn new class {\n\n\t\tconstructor() {\n\t\t\tthis.value = this.compute();\n\t\t}\n\n\t\tasync ensureExists() {\n\t\t\tif (typeof this.value === 'string') {\n\t\t\t\ttry {\n\t\t\t\t\tawait mkdirp(this.value);\n\n\t\t\t\t\treturn this.value;\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcompute() {\n\t\t\tif (process.argv.indexOf('--no-cached-data') > 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// IEnvironmentService.isBuilt\n\t\t\tif (process.env['VSCODE_DEV']) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// find commit id\n\t\t\tconst commit = product.commit;\n\t\t\tif (!commit) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn path.join(userDataPath, 'CachedData', commit);\n\t\t}\n\t};\n}\n\n/**\n * @param {string} dir\n * @returns {Promise<string>}\n */\nfunction mkdirp(dir) {\n\tconst fs = require('fs');\n\n\treturn new Promise((resolve, reject) => {\n\t\tfs.mkdir(dir, { recursive: true }, err => (err && err.code !== 'EEXIST') ? reject(err) : resolve(dir));\n\t});\n}\n\n//#region NLS Support\n\n/**\n * Resolve the NLS configuration\n *\n * @return {Promise<NLSConfiguration>}\n */\nasync function resolveNlsConfiguration() {\n\n\t// First, we need to test a user defined locale. If it fails we try the app locale.\n\t// If that fails we fall back to English.\n\tlet nlsConfiguration = nlsConfigurationPromise ? await nlsConfigurationPromise : undefined;\n\tif (!nlsConfiguration) {\n\n\t\t// Try to use the app locale. Please note that the app locale is only\n\t\t// valid after we have received the app ready event. This is why the\n\t\t// code is here.\n\t\tlet appLocale = app.getLocale();\n\t\tif (!appLocale) {\n\t\t\tnlsConfiguration = { locale: 'en', availableLanguages: {} };\n\t\t} else {\n\n\t\t\t// See above the comment about the loader and case sensitiviness\n\t\t\tappLocale = appLocale.toLowerCase();\n\n\t\t\tconst { getNLSConfiguration } = require('./vs/base/node/languagePacks');\n\t\t\tnlsConfiguration = await getNLSConfiguration(product.commit, userDataPath, metaDataFile, appLocale);\n\t\t\tif (!nlsConfiguration) {\n\t\t\t\tnlsConfiguration = { locale: appLocale, availableLanguages: {} };\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// We received a valid nlsConfig from a user defined locale\n\t}\n\n\treturn nlsConfiguration;\n}\n\n/**\n * @param {string} content\n * @returns {string}\n */\nfunction stripComments(content) {\n\tconst regexp = /(\"(?:[^\\\\\"]*(?:\\\\.)?)*\")|('(?:[^\\\\']*(?:\\\\.)?)*')|(\\/\\*(?:\\r?\\n|.)*?\\*\\/)|(\\/{2,}.*?(?:(?:\\r?\\n)|$))/g;\n\n\treturn content.replace(regexp, function (match, m1, m2, m3, m4) {\n\t\t// Only one of m1, m2, m3, m4 matches\n\t\tif (m3) {\n\t\t\t// A block comment. Replace with nothing\n\t\t\treturn '';\n\t\t} else if (m4) {\n\t\t\t// A line comment. If it ends in \\r?\\n then keep it.\n\t\t\tconst length_1 = m4.length;\n\t\t\tif (length_1 > 2 && m4[length_1 - 1] === '\\n') {\n\t\t\t\treturn m4[length_1 - 2] === '\\r' ? '\\r\\n' : '\\n';\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t} else {\n\t\t\t// We match a string\n\t\t\treturn match;\n\t\t}\n\t});\n}\n\n/**\n * Language tags are case insensitive however an amd loader is case sensitive\n * To make this work on case preserving & insensitive FS we do the following:\n * the language bundles have lower case language tags and we always lower case\n * the locale we receive from the user or OS.\n *\n * @param {{ locale: string | undefined; }} argvConfig\n * @returns {string | undefined}\n */\nfunction getUserDefinedLocale(argvConfig) {\n\tconst locale = args['locale'];\n\tif (locale) {\n\t\treturn locale.toLowerCase(); // a directly provided --locale always wins\n\t}\n\n\treturn argvConfig.locale && typeof argvConfig.locale === 'string' ? argvConfig.locale.toLowerCase() : undefined;\n}\n\n//#endregion\n"],"mappings":"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","names":[],"file":"main.js"}