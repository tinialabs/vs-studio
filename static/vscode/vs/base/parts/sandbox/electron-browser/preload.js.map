{"version":3,"sources":["out-vscode/vs/base/parts/sandbox/electron-browser/preload.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// @ts-check\n(function () {\n\t'use strict';\n\n\tconst { ipcRenderer, webFrame, crashReporter, contextBridge } = require('electron');\n\n\t//#region Utilities\n\n\t/**\n\t * @param {string} channel\n\t * @returns {true | never}\n\t */\n\tfunction validateIPC(channel) {\n\t\tif (!channel || !channel.startsWith('vscode:')) {\n\t\t\tthrow new Error(`Unsupported event IPC channel '${channel}'`);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {string} type\n\t * @returns {type is 'uncaughtException'}\n\t */\n\tfunction validateProcessEventType(type) {\n\t\tif (type !== 'uncaughtException') {\n\t\t\tthrow new Error(`Unsupported process event '${type}'`);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {string} key the name of the process argument to parse\n\t * @returns {string | undefined}\n\t */\n\tfunction parseArgv(key) {\n\t\tfor (const arg of process.argv) {\n\t\t\tif (arg.indexOf(`--${key}=`) === 0) {\n\t\t\t\treturn arg.split('=')[1];\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t//#endregion\n\n\t//#region Resolve Configuration\n\n\t/**\n\t * @typedef {import('../common/sandboxTypes').ISandboxConfiguration} ISandboxConfiguration\n\t */\n\n\t/** @type {ISandboxConfiguration | undefined} */\n\tlet configuration = undefined;\n\n\t/** @type {Promise<ISandboxConfiguration>} */\n\tconst resolveConfiguration = (async () => {\n\t\tconst windowConfigIpcChannel = parseArgv('vscode-window-config');\n\t\tif (!windowConfigIpcChannel) {\n\t\t\tthrow new Error('Preload: did not find expected vscode-window-config in renderer process arguments list.');\n\t\t}\n\n\t\ttry {\n\t\t\tif (validateIPC(windowConfigIpcChannel)) {\n\n\t\t\t\t// Resolve configuration from electron-main\n\t\t\t\tconfiguration = await ipcRenderer.invoke(windowConfigIpcChannel);\n\n\t\t\t\t// Apply `userEnv` directly\n\t\t\t\tObject.assign(process.env, configuration.userEnv);\n\n\t\t\t\t// Apply zoom level early before even building the\n\t\t\t\t// window DOM elements to avoid UI flicker. We always\n\t\t\t\t// have to set the zoom level from within the window\n\t\t\t\t// because Chrome has it's own way of remembering zoom\n\t\t\t\t// settings per origin (if vscode-file:// is used) and\n\t\t\t\t// we want to ensure that the user configuration wins.\n\t\t\t\twebFrame.setZoomLevel(configuration.zoomLevel ?? 0);\n\n\t\t\t\treturn configuration;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthrow new Error(`Preload: unable to fetch vscode-window-config: ${error}`);\n\t\t}\n\t})();\n\n\t//#endregion\n\n\t//#region Resolve Shell Environment\n\n\t/**\n\t * If VSCode is not run from a terminal, we should resolve additional\n\t * shell specific environment from the OS shell to ensure we are seeing\n\t * all development related environment variables. We do this from the\n\t * main process because it may involve spawning a shell.\n\t *\n\t * @type {Promise<typeof process.env>}\n\t */\n\tconst resolveShellEnv = (async () => {\n\n\t\t// Resolve `userEnv` from configuration and\n\t\t// `shellEnv` from the main side\n\t\tconst [userEnv, shellEnv] = await Promise.all([\n\t\t\t(async () => (await resolveConfiguration).userEnv)(),\n\t\t\tipcRenderer.invoke('vscode:fetchShellEnv')\n\t\t]);\n\n\t\tif (!process.env['VSCODE_SKIP_PROCESS_ENV_PATCHING'] /* TODO@bpasero for https://github.com/microsoft/vscode/issues/108804 */) {\n\t\t\t// Assign all keys of the shell environment to our process environment\n\t\t\t// But make sure that the user environment wins in the end over shell environment\n\t\t\tObject.assign(process.env, shellEnv, userEnv);\n\t\t}\n\n\t\treturn { ...process.env, ...shellEnv, ...userEnv };\n\t})();\n\n\t//#endregion\n\n\t//#region Globals Definition\n\n\t// #######################################################################\n\t// ###                                                                 ###\n\t// ###       !!! DO NOT USE GET/SET PROPERTIES ANYWHERE HERE !!!       ###\n\t// ###       !!!  UNLESS THE ACCESS IS WITHOUT SIDE EFFECTS  !!!       ###\n\t// ###       (https://github.com/electron/electron/issues/25516)       ###\n\t// ###                                                                 ###\n\t// #######################################################################\n\n\t/**\n\t * @type {import('../electron-sandbox/globals')}\n\t */\n\tconst globals = {\n\n\t\t/**\n\t\t * A minimal set of methods exposed from Electron's `ipcRenderer`\n\t\t * to support communication to main process.\n\t\t *\n\t\t * @typedef {import('../electron-sandbox/electronTypes').IpcRenderer} IpcRenderer\n\t\t * @typedef {import('electron').IpcRendererEvent} IpcRendererEvent\n\t\t *\n\t\t * @type {IpcRenderer}\n\t\t */\n\n\t\tipcRenderer: {\n\n\t\t\t/**\n\t\t\t * @param {string} channel\n\t\t\t * @param {any[]} args\n\t\t\t */\n\t\t\tsend(channel, ...args) {\n\t\t\t\tif (validateIPC(channel)) {\n\t\t\t\t\tipcRenderer.send(channel, ...args);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @param {string} channel\n\t\t\t * @param {any[]} args\n\t\t\t * @returns {Promise<any> | undefined}\n\t\t\t */\n\t\t\tinvoke(channel, ...args) {\n\t\t\t\tif (validateIPC(channel)) {\n\t\t\t\t\treturn ipcRenderer.invoke(channel, ...args);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @param {string} channel\n\t\t\t * @param {(event: IpcRendererEvent, ...args: any[]) => void} listener\n\t\t\t * @returns {IpcRenderer}\n\t\t\t */\n\t\t\ton(channel, listener) {\n\t\t\t\tif (validateIPC(channel)) {\n\t\t\t\t\tipcRenderer.on(channel, listener);\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @param {string} channel\n\t\t\t * @param {(event: IpcRendererEvent, ...args: any[]) => void} listener\n\t\t\t * @returns {IpcRenderer}\n\t\t\t */\n\t\t\tonce(channel, listener) {\n\t\t\t\tif (validateIPC(channel)) {\n\t\t\t\t\tipcRenderer.once(channel, listener);\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @param {string} channel\n\t\t\t * @param {(event: IpcRendererEvent, ...args: any[]) => void} listener\n\t\t\t * @returns {IpcRenderer}\n\t\t\t */\n\t\t\tremoveListener(channel, listener) {\n\t\t\t\tif (validateIPC(channel)) {\n\t\t\t\t\tipcRenderer.removeListener(channel, listener);\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @type {import('../electron-sandbox/globals').IpcMessagePort}\n\t\t */\n\t\tipcMessagePort: {\n\n\t\t\t/**\n\t\t\t * @param {string} channelRequest\n\t\t\t * @param {string} channelResponse\n\t\t\t * @param {string} requestNonce\n\t\t\t */\n\t\t\tconnect(channelRequest, channelResponse, requestNonce) {\n\t\t\t\tif (validateIPC(channelRequest) && validateIPC(channelResponse)) {\n\t\t\t\t\tconst responseListener = (/** @type {IpcRendererEvent} */ e, /** @type {string} */ responseNonce) => {\n\t\t\t\t\t\t// validate that the nonce from the response is the same\n\t\t\t\t\t\t// as when requested. and if so, use `postMessage` to\n\t\t\t\t\t\t// send the `MessagePort` safely over, even when context\n\t\t\t\t\t\t// isolation is enabled\n\t\t\t\t\t\tif (requestNonce === responseNonce) {\n\t\t\t\t\t\t\tipcRenderer.off(channelResponse, responseListener);\n\t\t\t\t\t\t\twindow.postMessage(requestNonce, '*', e.ports);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// request message port from main and await result\n\t\t\t\t\tipcRenderer.on(channelResponse, responseListener);\n\t\t\t\t\tipcRenderer.send(channelRequest, requestNonce);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Support for subset of methods of Electron's `webFrame` type.\n\t\t *\n\t\t * @type {import('../electron-sandbox/electronTypes').WebFrame}\n\t\t */\n\t\twebFrame: {\n\n\t\t\t/**\n\t\t\t * @param {number} level\n\t\t\t */\n\t\t\tsetZoomLevel(level) {\n\t\t\t\tif (typeof level === 'number') {\n\t\t\t\t\twebFrame.setZoomLevel(level);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Support for subset of methods of Electron's `crashReporter` type.\n\t\t *\n\t\t * @type {import('../electron-sandbox/electronTypes').CrashReporter}\n\t\t */\n\t\tcrashReporter: {\n\n\t\t\t/**\n\t\t\t * @param {string} key\n\t\t\t * @param {string} value\n\t\t\t */\n\t\t\taddExtraParameter(key, value) {\n\t\t\t\tcrashReporter.addExtraParameter(key, value);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Support for a subset of access to node.js global `process`.\n\t\t *\n\t\t * Note: when `sandbox` is enabled, the only properties available\n\t\t * are https://github.com/electron/electron/blob/master/docs/api/process.md#sandbox\n\t\t *\n\t\t * @typedef {import('../electron-sandbox/globals').ISandboxNodeProcess} ISandboxNodeProcess\n\t\t *\n\t\t * @type {ISandboxNodeProcess}\n\t\t */\n\t\tprocess: {\n\t\t\tget platform() { return process.platform; },\n\t\t\tget arch() { return process.arch; },\n\t\t\tget env() { return process.env; },\n\t\t\tget versions() { return process.versions; },\n\t\t\tget type() { return 'renderer'; },\n\t\t\tget execPath() { return process.execPath; },\n\t\t\tget sandboxed() { return process.sandboxed; },\n\n\t\t\t/**\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tcwd() {\n\t\t\t\treturn process.env['VSCODE_CWD'] || process.execPath.substr(0, process.execPath.lastIndexOf(process.platform === 'win32' ? '\\\\' : '/'));\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @returns {Promise<typeof process.env>}\n\t\t\t */\n\t\t\tshellEnv() {\n\t\t\t\treturn resolveShellEnv;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @returns {Promise<import('electron').ProcessMemoryInfo>}\n\t\t\t */\n\t\t\tgetProcessMemoryInfo() {\n\t\t\t\treturn process.getProcessMemoryInfo();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @param {string} type\n\t\t\t * @param {Function} callback\n\t\t\t * @returns {ISandboxNodeProcess}\n\t\t\t */\n\t\t\ton(type, callback) {\n\t\t\t\tif (validateProcessEventType(type)) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tprocess.on(type, callback);\n\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Some information about the context we are running in.\n\t\t *\n\t\t * @type {import('../electron-sandbox/globals').ISandboxContext}\n\t\t */\n\t\tcontext: {\n\n\t\t\t/**\n\t\t\t * A configuration object made accessible from the main side\n\t\t\t * to configure the sandbox browser window.\n\t\t\t *\n\t\t\t * Note: intentionally not using a getter here because the\n\t\t\t * actual value will be set after `resolveConfiguration`\n\t\t\t * has finished.\n\t\t\t *\n\t\t\t * @returns {ISandboxConfiguration | undefined}\n\t\t\t */\n\t\t\tconfiguration() {\n\t\t\t\treturn configuration;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Allows to await the resolution of the configuration object.\n\t\t\t *\n\t\t\t * @returns {Promise<ISandboxConfiguration>}\n\t\t\t */\n\t\t\tasync resolveConfiguration() {\n\t\t\t\treturn resolveConfiguration;\n\t\t\t}\n\t\t}\n\t};\n\n\t// Use `contextBridge` APIs to expose globals to VSCode\n\t// only if context isolation is enabled, otherwise just\n\t// add to the DOM global.\n\tlet useContextBridge = process.argv.includes('--context-isolation');\n\tif (useContextBridge) {\n\t\ttry {\n\t\t\tcontextBridge.exposeInMainWorld('vscode', globals);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\n\t\t\tuseContextBridge = false;\n\t\t}\n\t}\n\n\tif (!useContextBridge) {\n\t\t// @ts-ignore\n\t\twindow.vscode = globals;\n\t}\n}());\n"],"mappings":"AAMA,AAAC,YACA,aAEA,KAAM,CAAE,cAAa,WAAU,gBAAe,iBAAkB,QAAQ,YAQxE,WAAqB,GACpB,GAAI,CAAC,GAAW,CAAC,EAAQ,WAAW,WACnC,KAAM,IAAI,OAAM,kCAAkC,MAGnD,MAAO,GAOR,WAAkC,GACjC,GAAI,IAAS,oBACZ,KAAM,IAAI,OAAM,8BAA8B,MAG/C,MAAO,GAOR,WAAmB,GAClB,SAAW,KAAO,SAAQ,KACzB,GAAI,EAAI,QAAQ,KAAK,QAAY,EAChC,MAAO,GAAI,MAAM,KAAK,GAgBzB,GAAI,GAGJ,KAAM,GAAwB,WA/D/B,MAgEE,KAAM,GAAyB,EAAU,wBACzC,GAAI,CAAC,EACJ,KAAM,IAAI,OAAM,2FAGjB,IACC,GAAI,EAAY,GAGf,SAAgB,KAAM,GAAY,OAAO,GAGzC,OAAO,OAAO,QAAQ,IAAK,EAAc,SAQzC,EAAS,aAAa,KAAc,YAAd,OAA2B,GAE1C,QAEA,GACR,KAAM,IAAI,OAAM,kDAAkD,UAgB9D,EAAmB,WAIxB,KAAM,CAAC,EAAS,GAAY,KAAM,SAAQ,IAAI,CAC5C,UAAa,MAAM,IAAsB,WAC1C,EAAY,OAAO,0BAGpB,MAAK,SAAQ,IAAI,kCAGhB,OAAO,OAAO,QAAQ,IAAK,EAAU,GAG/B,IAAK,QAAQ,OAAQ,KAAa,OAkBpC,EAAU,CAYf,YAAa,CAMZ,KAAK,KAAY,GAChB,AAAI,EAAY,IACf,EAAY,KAAK,EAAS,GAAG,IAS/B,OAAO,KAAY,GAClB,GAAI,EAAY,GACf,MAAO,GAAY,OAAO,EAAS,GAAG,IASxC,GAAG,EAAS,GACX,GAAI,EAAY,GACf,SAAY,GAAG,EAAS,GAEjB,MAST,KAAK,EAAS,GACb,GAAI,EAAY,GACf,SAAY,KAAK,EAAS,GAEnB,MAST,eAAe,EAAS,GACvB,GAAI,EAAY,GACf,SAAY,eAAe,EAAS,GAE7B,OAQV,eAAgB,CAOf,QAAQ,EAAgB,EAAiB,GACxC,GAAI,EAAY,IAAmB,EAAY,IAC9C,KAAM,GAAmB,CAAiC,EAAyB,KAKlF,AAAI,IAAiB,GACpB,GAAY,IAAI,EAAiB,GACjC,OAAO,YAAY,EAAc,IAAK,EAAE,SAK1C,EAAY,GAAG,EAAiB,GAChC,EAAY,KAAK,EAAgB,MAUpC,SAAU,CAKT,aAAa,GACZ,AAAI,MAAO,IAAU,UACpB,EAAS,aAAa,KAUzB,cAAe,CAMd,kBAAkB,EAAK,GACtB,EAAc,kBAAkB,EAAK,KAcvC,QAAS,IACJ,YAAa,MAAO,SAAQ,aAC5B,QAAS,MAAO,SAAQ,SACxB,OAAQ,MAAO,SAAQ,QACvB,YAAa,MAAO,SAAQ,aAC5B,QAAS,MAAO,eAChB,YAAa,MAAO,SAAQ,aAC5B,aAAc,MAAO,SAAQ,WAKjC,MACC,MAAO,SAAQ,IAAI,YAAiB,QAAQ,SAAS,OAAO,EAAG,QAAQ,SAAS,YAAY,QAAQ,WAAa,QAAU,KAAO,OAMnI,WACC,MAAO,IAMR,uBACC,MAAO,SAAQ,wBAQhB,GAAG,EAAM,GACR,GAAI,EAAyB,GAE5B,eAAQ,GAAG,EAAM,GAEV,OAUV,QAAS,CAYR,gBACC,MAAO,SAQF,wBACL,MAAO,MAQV,GAAI,GAAmB,QAAQ,KAAK,SAAS,uBAC7C,GAAI,EACH,IACC,EAAc,kBAAkB,SAAU,SAClC,GACR,QAAQ,MAAM,GAEd,EAAmB,GAIrB,AAAK,GAEJ,QAAO,OAAS","names":[],"file":"preload.js"}