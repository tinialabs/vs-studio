{"version":3,"sources":["out-vscode/vs/platform/environment/node/userDataPath.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/// <reference path=\"../../../../typings/require.d.ts\" />\n\n//@ts-check\n(function () {\n\t'use strict';\n\n\t/**\n\t * @typedef {import('../../environment/common/argv').NativeParsedArgs} NativeParsedArgs\n\t *\n\t * @param {typeof import('path')} path\n\t * @param {typeof import('os')} os\n\t * @param {string} productName\n\t * @param {string} cwd\n\t */\n\tfunction factory(path, os, productName, cwd) {\n\n\t\t/**\n\t\t * @param {NativeParsedArgs} cliArgs\n\t\t *\n\t\t * @returns {string}\n\t\t */\n\t\tfunction getUserDataPath(cliArgs) {\n\t\t\tconst userDataPath = doGetUserDataPath(cliArgs);\n\t\t\tconst pathsToResolve = [userDataPath];\n\n\t\t\t// If the user-data-path is not absolute, make\n\t\t\t// sure to resolve it against the passed in\n\t\t\t// current working directory. We cannot use the\n\t\t\t// node.js `path.resolve()` logic because it will\n\t\t\t// not pick up our `VSCODE_CWD` environment variable\n\t\t\t// (https://github.com/microsoft/vscode/issues/120269)\n\t\t\tif (!path.isAbsolute(userDataPath)) {\n\t\t\t\tpathsToResolve.unshift(cwd);\n\t\t\t}\n\n\t\t\treturn path.resolve(...pathsToResolve);\n\t\t}\n\n\t\t/**\n\t\t * @param {NativeParsedArgs} cliArgs\n\t\t *\n\t\t * @returns {string}\n\t\t */\n\t\tfunction doGetUserDataPath(cliArgs) {\n\n\t\t\t// 1. Support portable mode\n\t\t\tconst portablePath = process.env['VSCODE_PORTABLE'];\n\t\t\tif (portablePath) {\n\t\t\t\treturn path.join(portablePath, 'user-data');\n\t\t\t}\n\n\t\t\t// 2. Support explicit --user-data-dir\n\t\t\tconst cliPath = cliArgs['user-data-dir'];\n\t\t\tif (cliPath) {\n\t\t\t\treturn cliPath;\n\t\t\t}\n\n\t\t\t// 3. Support global VSCODE_APPDATA environment variable\n\t\t\tlet appDataPath = process.env['VSCODE_APPDATA'];\n\n\t\t\t// 4. Otherwise check per platform\n\t\t\tif (!appDataPath) {\n\t\t\t\tswitch (process.platform) {\n\t\t\t\t\tcase 'win32':\n\t\t\t\t\t\tappDataPath = process.env['APPDATA'];\n\t\t\t\t\t\tif (!appDataPath) {\n\t\t\t\t\t\t\tconst userProfile = process.env['USERPROFILE'];\n\t\t\t\t\t\t\tif (typeof userProfile !== 'string') {\n\t\t\t\t\t\t\t\tthrow new Error('Windows: Unexpected undefined %USERPROFILE% environment variable');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tappDataPath = path.join(userProfile, 'AppData', 'Roaming');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'darwin':\n\t\t\t\t\t\tappDataPath = path.join(os.homedir(), 'Library', 'Application Support');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'linux':\n\t\t\t\t\t\tappDataPath = process.env['XDG_CONFIG_HOME'] || path.join(os.homedir(), '.config');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('Platform not supported');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn path.join(appDataPath, productName);\n\t\t}\n\n\t\treturn {\n\t\t\tgetUserDataPath\n\t\t};\n\t}\n\n\tif (typeof define === 'function') {\n\t\tdefine(['require', 'path', 'os', 'vs/base/common/network', 'vs/base/common/resources', 'vs/base/common/process'], function (\n\t\t\trequire,\n\t\t\t/** @type {typeof import('path')} */ path,\n\t\t\t/** @type {typeof import('os')} */ os,\n\t\t\t/** @type {typeof import('../../../base/common/network')} */ network,\n\t\t\t/** @type {typeof import(\"../../../base/common/resources\")} */ resources,\n\t\t\t/** @type {typeof import(\"../../../base/common/process\")} */ process\n\t\t) {\n\t\t\tconst rootPath = resources.dirname(network.FileAccess.asFileUri('', require));\n\t\t\tconst pkg = require.__$__nodeRequire(resources.joinPath(rootPath, 'package.json').fsPath);\n\n\t\t\treturn factory(path, os, pkg.name, process.cwd());\n\t\t}); // amd\n\t} else if (typeof module === 'object' && typeof module.exports === 'object') {\n\t\tconst pkg = require('../../../../../package.json');\n\t\tconst path = require('path');\n\t\tconst os = require('os');\n\n\t\tmodule.exports = factory(path, os, pkg.name, process.env['VSCODE_CWD'] || process.cwd()); // commonjs\n\t} else {\n\t\tthrow new Error('Unknown context');\n\t}\n}());\n"],"mappings":"AAQA,AAAC,YACA,aAUA,WAAiB,EAAM,EAAI,EAAa,GAOvC,WAAyB,GACxB,KAAM,GAAe,EAAkB,GACjC,EAAiB,CAAC,GAQxB,MAAK,GAAK,WAAW,IACpB,EAAe,QAAQ,GAGjB,EAAK,QAAQ,GAAG,GAQxB,WAA2B,GAG1B,KAAM,GAAe,QAAQ,IAAI,gBACjC,GAAI,EACH,MAAO,GAAK,KAAK,EAAc,aAIhC,KAAM,GAAU,EAAQ,iBACxB,GAAI,EACH,MAAO,GAIR,GAAI,GAAc,QAAQ,IAAI,eAG9B,GAAI,CAAC,EACJ,OAAQ,QAAQ,cACV,QAEJ,GADA,EAAc,QAAQ,IAAI,QACtB,CAAC,GACJ,KAAM,GAAc,QAAQ,IAAI,YAChC,GAAI,MAAO,IAAgB,SAC1B,KAAM,IAAI,OAAM,oEAGjB,EAAc,EAAK,KAAK,EAAa,UAAW,WAEjD,UACI,SACJ,EAAc,EAAK,KAAK,EAAG,UAAW,UAAW,uBACjD,UACI,QACJ,EAAc,QAAQ,IAAI,iBAAsB,EAAK,KAAK,EAAG,UAAW,WACxE,cAEA,KAAM,IAAI,OAAM,0BAInB,MAAO,GAAK,KAAK,EAAa,GAG/B,MAAO,CACN,mBAIF,GAAI,MAAO,SAAW,WACrB,OAAO,CAAC,UAAW,OAAQ,KAAM,yBAA0B,2BAA4B,0BAA2B,SACjH,EACqC,EACF,EAC0B,EACE,EACF,GAE7D,KAAM,GAAW,EAAU,QAAQ,EAAQ,WAAW,UAAU,GAAI,IAC9D,EAAM,EAAQ,iBAAiB,EAAU,SAAS,EAAU,gBAAgB,QAElF,MAAO,GAAQ,EAAM,EAAI,EAAI,KAAM,EAAQ,iBAElC,MAAO,SAAW,UAAY,MAAO,QAAO,SAAY,UAClE,KAAM,GAAM,QAAQ,+BACd,EAAO,QAAQ,QACf,EAAK,QAAQ,MAEnB,OAAO,QAAU,EAAQ,EAAM,EAAI,EAAI,KAAM,QAAQ,IAAI,YAAiB,QAAQ,WAElF,MAAM,IAAI,OAAM","names":[],"file":"userDataPath.js"}